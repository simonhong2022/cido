const axios = require('axios');
require('dotenv').config({ path: '.env.local' });

async function getBackgroundOnly() {
  try {
    console.log('Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄÎßå Ï∂îÏ∂úÌïòÎäî Ï§ë...\n');
    
    const response = await axios.get(`https://api.figma.com/v1/files/${process.env.FIGMA_FILE_KEY}`, {
      headers: {
        'X-Figma-Token': process.env.FIGMA_ACCESS_TOKEN,
      },
    });
    
    const figmaData = response.data;
    const document = figmaData.document;
    
    function findNodeById(node, targetId) {
      if (node.id === targetId) {
        return node;
      }
      
      if (node.children) {
        for (let child of node.children) {
          const found = findNodeById(child, targetId);
          if (found) return found;
        }
      }
      
      return null;
    }
    
    // Frame 1261154907 Ï∞æÍ∏∞ (Î∞∞Í≤Ω ÌîÑÎ†àÏûÑ)
    const bgFrame = findNodeById(document, '136:7719');
    
    if (bgFrame && bgFrame.fills) {
      console.log('======================================================================');
      console.log('Frame 1261154907 Î∞∞Í≤Ω Ï†ïÎ≥¥:');
      console.log('======================================================================\n');
      
      // IMAGE ÌÉÄÏûÖÏùò fill Ï∞æÍ∏∞
      const imageFill = bgFrame.fills.find(fill => fill.type === 'IMAGE');
      
      if (imageFill && imageFill.imageRef) {
        console.log('‚úÖ Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ Ï∞∏Ï°∞ Ï∞æÏùå:', imageFill.imageRef);
        
        // Ïù¥ÎØ∏ÏßÄ Ï∞∏Ï°∞Î°ú URL Í∞ÄÏ†∏Ïò§Í∏∞
        const imageUrl = `https://api.figma.com/v1/images/${process.env.FIGMA_FILE_KEY}?ids=136:7719&format=png&scale=2`;
        
        const imageResponse = await axios.get(imageUrl, {
          headers: {
            'X-Figma-Token': process.env.FIGMA_ACCESS_TOKEN,
          },
        });
        
        if (imageResponse.data.images && imageResponse.data.images['136:7719']) {
          console.log('\nÎ∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ URL:');
          console.log(imageResponse.data.images['136:7719']);
          
          console.log('\n‚ö†Ô∏è  Ï£ºÏùò: Ïù¥ Ïù¥ÎØ∏ÏßÄÏóêÎäî Ïó¨Ï†ÑÌûà ÌÖçÏä§Ìä∏Í∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏäµÎãàÎã§.');
          console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
          console.log('üí° Îçî ÎÇòÏùÄ Ìï¥Í≤∞Ï±Ö:');
          console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
          console.log('\n1. CSS Î∞∞Í≤ΩÏÉâ + Í∑∏ÎùºÎç∞Ïù¥ÏÖò ÏÇ¨Ïö©:');
          console.log('   - FigmaÏùò Î∞∞Í≤Ω fill Ï†ïÎ≥¥Î•º CSSÎ°ú Ïû¨ÌòÑ');
          console.log('   - ÌÖçÏä§Ìä∏Îäî React Ïª¥Ìè¨ÎÑåÌä∏Î°ú ÏûëÏÑ±');
          console.log('   - Ïù¥ÎØ∏ÏßÄÎäî ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏùå');
          console.log('\n2. Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄÎßå Î≥ÑÎèÑ Î†àÏù¥Ïñ¥Î°ú Î∂ÑÎ¶¨:');
          console.log('   - FigmaÏóêÏÑú Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄÎ•º Î≥ÑÎèÑ RECTANGLEÏúºÎ°ú Î∂ÑÎ¶¨');
          console.log('   - ÌÖçÏä§Ìä∏ Î†àÏù¥Ïñ¥ÏôÄ ÎèÖÎ¶ΩÏ†ÅÏúºÎ°ú Í¥ÄÎ¶¨');
          console.log('\n3. Figma Ïª¥Ìè¨ÎÑåÌä∏ Íµ¨Ï°∞ Í∞úÏÑ†:');
          console.log('   - Î∞∞Í≤ΩÏö© Ïª¥Ìè¨ÎÑåÌä∏ÏôÄ ÏΩòÌÖêÏ∏†Ïö© Ïª¥Ìè¨ÎÑåÌä∏ Î∂ÑÎ¶¨');
          console.log('   - APIÏóêÏÑú Í∞ÅÍ∞Å ÎèÖÎ¶ΩÏ†ÅÏúºÎ°ú Í∞ÄÏ†∏Ïò§Í∏∞');
        }
      }
      
      console.log('\n======================================================================');
      console.log('Frame 1261154907Ïùò Î™®Îì† fill Ï†ïÎ≥¥:');
      console.log('======================================================================\n');
      
      bgFrame.fills.forEach((fill, index) => {
        console.log(`Fill ${index + 1}:`);
        console.log(`  ÌÉÄÏûÖ: ${fill.type}`);
        
        if (fill.type === 'SOLID') {
          const color = fill.color;
          console.log(`  ÏÉâÏÉÅ: rgba(${Math.round(color.r * 255)}, ${Math.round(color.g * 255)}, ${Math.round(color.b * 255)}, ${color.a})`);
          console.log(`  HEX: #${Math.round(color.r * 255).toString(16).padStart(2, '0')}${Math.round(color.g * 255).toString(16).padStart(2, '0')}${Math.round(color.b * 255).toString(16).padStart(2, '0')}`);
        }
        
        if (fill.type === 'IMAGE') {
          console.log(`  Ïù¥ÎØ∏ÏßÄ Ï∞∏Ï°∞: ${fill.imageRef}`);
          console.log(`  Î∂àÌà¨Î™ÖÎèÑ: ${fill.opacity || 1}`);
          if (fill.scaleMode) {
            console.log(`  Ïä§ÏºÄÏùº Î™®Îìú: ${fill.scaleMode}`);
          }
        }
        
        if (fill.type === 'GRADIENT_LINEAR') {
          console.log(`  Í∑∏ÎùºÎç∞Ïù¥ÏÖò:`);
          if (fill.gradientStops) {
            fill.gradientStops.forEach((stop, stopIndex) => {
              const color = stop.color;
              console.log(`    Stop ${stopIndex + 1} (position: ${stop.position}):`);
              console.log(`      rgba(${Math.round(color.r * 255)}, ${Math.round(color.g * 255)}, ${Math.round(color.b * 255)}, ${color.a})`);
            });
          }
        }
        
        console.log('');
      });
    }
    
  } catch (error) {
    console.error('‚ùå Ïò§Î•ò Î∞úÏÉù:', error.message);
  }
}

getBackgroundOnly();
